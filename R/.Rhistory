colnames(df_increase)[colnames(df_increase) == "Country.Name"] ="region" #Rename to make left_join work
mapData <- left_join(mapData, df_increase, by="region")
sum(is.na(mapData$increase)) # Count NA values : 29806
mapData1 <- mapData %>% filter(!is.na(mapData$increase)) #Filter out NA values
sum(is.na(mapData1$increase)) # Count NA values : 0
mapData1$increase <- ifelse(mapData1$increase < -50, -50, mapData1$increase) #Fit min value to -50 or under
mapData1$increase <- ifelse(mapData1$increase > 50, 50, mapData1$increase) #Fit max value to -50 or over
map1 <- ggplot(mapData1, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black") #Create map
map2 <- map1 + scale_fill_gradient(name = "Increase", low = "red", high =  "green", na.value = "grey50")+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank())
print(map2 + ggtitle("Increase in GDP per capita from 2017 to 2021 \nFrom -50 or under to 50 or over"))
##### -- Packages -- #####
#install.packages("ggplot2")
#install.packages("map")
#install.packages("tidyverse")
##### -- Libaries -- #####
if(!require(ggplot2)){install.packages('ggplot2')}
if(!require(tidyverse)){install.packages('tidyverse')}
##### -- Load data -- #####
#GDP per capita (current US$) - https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
df_original <- read.csv('C:/C/gitHub/code/R/visual/data/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_5447781.csv',
header = TRUE, sep = ',', na.strings = c("NA"))
df_original
##### -- Clean data -- #####
colnames(df_original)
reqd <- c("Country.Name", "X2017", "X2021")
reqd
df_clean <- subset(df_original, select = reqd) #
df_clean <- na.omit(df_clean) #Remove rows with NA
df_clean
##### -- Calculate increase -- #####
vec2017 <- df_clean$"X2017" #Turn col into vectors
vec2021 <- df_clean$"X2021"
vec_increase <- (vec2021 - vec2017) / vec2021 * 100 #Calculate increase in pct
df_increase <- subset(df_clean, select = ("Country.Name"))
df_increase$increase <- vec_increase #Add vector to dataframe
# - View(df_increase)
##### -- Map -- #####
mapData <- map_data("world") #ggplot2
#Fit names manually
countyNames1 <- (unique(mapData["region"]))
countyNames2 <- (unique(df_increase["Country.Name"]))
write.csv(countyNames1, "C:/C/gitHub/code/R/visual/mapDataRegion.csv", row.names=FALSE)
write.csv(countyNames2, "C:/C/gitHub/code/R/visual/df_increaseCountryName.csv", row.names=FALSE)
df_increase[df_increase$"Country.Name" == "United Kingdom", "Country.Name"] <- "UK"
df_increase[df_increase$"Country.Name" == "United States", "Country.Name"] <- "USA"
df_increase[df_increase$"Country.Name" == "Bahamas, The", "Country.Name"] <- "Bahamas"
df_increase[df_increase$"Country.Name" == "Brunei Darussalam", "Country.Name"] <- "Brunei"
df_increase[df_increase$"Country.Name" == "Cote d'Ivoire", "Country.Name"] <- "Ivory Coast"
df_increase[df_increase$"Country.Name" == "Russian Federation", "Country.Name"] <- "Russia"
df_increase[df_increase$"Country.Name" == "Solomon Islands", "Country.Name"] <- "South Sandwich Islands"
df_increase[df_increase$"Country.Name" == "Slovak Republic", "Country.Name"] <- "Slovakia"
df_increase[df_increase$"Country.Name" == "Turkiye", "Country.Name"] <- "Turkey"
df_increase <- df_increase[df_increase$"Country.Name" %in% mapData$"region", ] #Remove rows where country.name != region
df_increase
colnames(df_increase)[colnames(df_increase) == "Country.Name"] ="region" #Rename to make left_join work
mapData <- left_join(mapData, df_increase, by="region")
sum(is.na(mapData$increase)) # Count NA values : 29806
mapData1 <- mapData %>% filter(!is.na(mapData$increase)) #Filter out NA values
sum(is.na(mapData1$increase)) # Count NA values : 0
mapData1$increase <- ifelse(mapData1$increase < -50, -50, mapData1$increase) #Fit min value to -50 or under
mapData1$increase <- ifelse(mapData1$increase > 50, 50, mapData1$increase) #Fit max value to -50 or over
map1 <- ggplot(mapData1, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black") #Create map
map2 <- map1 + scale_fill_gradient(name = "Increase", low = "red", high =  "green", na.value = "grey50")+
geom_polygon(aes(fill = ifelse(is.na(increase), "grey", as.character(increase))), color = "black") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank())
print(map2 + ggtitle("Increase in GDP per capita from 2017 to 2021 \nFrom -50 or under to 50 or over"))
##### -- Packages -- #####
#install.packages("ggplot2")
#install.packages("map")
#install.packages("tidyverse")
##### -- Libaries -- #####
if(!require(ggplot2)){install.packages('ggplot2')}
if(!require(tidyverse)){install.packages('tidyverse')}
##### -- Load data -- #####
#GDP per capita (current US$) - https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
df_original <- read.csv('C:/C/gitHub/code/R/visual/data/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_5447781.csv',
header = TRUE, sep = ',', na.strings = c("NA"))
df_original
##### -- Clean data -- #####
colnames(df_original)
reqd <- c("Country.Name", "X2017", "X2021")
reqd
df_clean <- subset(df_original, select = reqd) #
df_clean <- na.omit(df_clean) #Remove rows with NA
df_clean
##### -- Calculate increase -- #####
vec2017 <- df_clean$"X2017" #Turn col into vectors
vec2021 <- df_clean$"X2021"
vec_increase <- (vec2021 - vec2017) / vec2021 * 100 #Calculate increase in pct
df_increase <- subset(df_clean, select = ("Country.Name"))
df_increase$increase <- vec_increase #Add vector to dataframe
# - View(df_increase)
##### -- Map -- #####
mapData <- map_data("world") #ggplot2
#Fit names manually
countyNames1 <- (unique(mapData["region"]))
countyNames2 <- (unique(df_increase["Country.Name"]))
write.csv(countyNames1, "C:/C/gitHub/code/R/visual/mapDataRegion.csv", row.names=FALSE)
write.csv(countyNames2, "C:/C/gitHub/code/R/visual/df_increaseCountryName.csv", row.names=FALSE)
df_increase[df_increase$"Country.Name" == "United Kingdom", "Country.Name"] <- "UK"
df_increase[df_increase$"Country.Name" == "United States", "Country.Name"] <- "USA"
df_increase[df_increase$"Country.Name" == "Bahamas, The", "Country.Name"] <- "Bahamas"
df_increase[df_increase$"Country.Name" == "Brunei Darussalam", "Country.Name"] <- "Brunei"
df_increase[df_increase$"Country.Name" == "Cote d'Ivoire", "Country.Name"] <- "Ivory Coast"
df_increase[df_increase$"Country.Name" == "Russian Federation", "Country.Name"] <- "Russia"
df_increase[df_increase$"Country.Name" == "Solomon Islands", "Country.Name"] <- "South Sandwich Islands"
df_increase[df_increase$"Country.Name" == "Slovak Republic", "Country.Name"] <- "Slovakia"
df_increase[df_increase$"Country.Name" == "Turkiye", "Country.Name"] <- "Turkey"
df_increase <- df_increase[df_increase$"Country.Name" %in% mapData$"region", ] #Remove rows where country.name != region
df_increase
colnames(df_increase)[colnames(df_increase) == "Country.Name"] ="region" #Rename to make left_join work
mapData <- left_join(mapData, df_increase, by="region")
sum(is.na(mapData$increase)) # Count NA values : 29806
mapData1 <- mapData %>% filter(!is.na(mapData$increase)) #Filter out NA values
sum(is.na(mapData1$increase)) # Count NA values : 0
mapData1$increase <- ifelse(mapData1$increase < -50, -50, mapData1$increase) #Fit min value to -50 or under
mapData1$increase <- ifelse(mapData1$increase > 50, 50, mapData1$increase) #Fit max value to -50 or over
map1 <- ggplot(mapData1, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black") #Create map
map2 <- map1 + scale_fill_gradient(name = "Increase", low = "red", high =  "green", na.value = "grey50")+
geom_polygon(aes(fill = increase), color = "black")
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank())
print(map2 + ggtitle("Increase in GDP p
0
quit
##### -- Packages -- #####
#install.packages("ggplot2")
##### -- Packages -- #####
#install.packages("ggplot2")
#install.packages("map")
#install.packages("tidyverse")
##### -- Libaries -- #####
if(!require(ggplot2)){install.packages('ggplot2')}
if(!require(tidyverse)){install.packages('tidyverse')}
#GDP per capita (current US$) - https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
df_original <- read.csv('C:/C/gitHub/code/R/visual/data/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_5447781.csv',
header = TRUE, sep = ',', na.strings = c("NA"))
df_original
##### -- Clean data -- #####
colnames(df_original)
reqd <- c("Country.Name", "X2017", "X2021")
reqd
df_clean <- subset(df_original, select = reqd) #
df_clean <- na.omit(df_clean) #Remove rows with NA
df_clean
##### -- Calculate increase -- #####
vec2017 <- df_clean$"X2017" #Turn col into vectors
vec_increase <- (vec2021 - vec2017) / vec2021 * 100 #Calculate increase in pct
df_increase <- subset(df_clean, select = ("Country.Name"))
df_increase$increase <- vec_increase #Add vector to dataframe
# - View(df_increase)
##### -- Map -- #####
mapData <- map_data("world") #ggplot2
#Fit names manually
countyNames1 <- (unique(mapData["region"]))
countyNames2 <- (unique(df_increase["Country.Name"]))
write.csv(countyNames1, "C:/C/gitHub/code/R/visual/mapDataRegion.csv", row.names=FALSE)
write.csv(countyNames2, "C:/C/gitHub/code/R/visual/df_increaseCountryName.csv", row.names=FALSE)
df_increase[df_increase$"Country.Name" == "United Kingdom", "Country.Name"] <- "UK"
df_increase[df_increase$"Country.Name" == "United States", "Country.Name"] <- "USA"
df_increase[df_increase$"Country.Name" == "Bahamas, The", "Country.Name"] <- "Bahamas"
df_increase[df_increase$"Country.Name" == "Brunei Darussalam", "Country.Name"] <- "Brunei"
df_increase[df_increase$"Country.Name" == "Cote d'Ivoire", "Country.Name"] <- "Ivory Coast"
df_increase[df_increase$"Country.Name" == "Russian Federation", "Country.Name"] <- "Russia"
df_increase[df_increase$"Country.Name" == "Solomon Islands", "Country.Name"] <- "South Sandwich Islands"
df_increase[df_increase$"Country.Name" == "Slovak Republic", "Country.Name"] <- "Slovakia"
df_increase[df_increase$"Country.Name" == "Turkiye", "Country.Name"] <- "Turkey"
df_increase <- df_increase[df_increase$"Country.Name" %in% mapData$"region", ] #Remove rows where country.name != region
df_increase
colnames(df_increase)[colnames(df_increase) == "Country.Name"] ="region" #Rename to make left_join work
mapData <- left_join(mapData, df_increase, by="region")
sum(is.na(mapData$increase)) # Count NA values : 29806
mapData1 <- mapData %>% filter(!is.na(mapData$increase)) #Filter out NA values
sum(is.na(mapData1$increase)) # Count NA values : 0
mapData1$increase <- ifelse(mapData1$increase < -50, -50, mapData1$increase) #Fit min value to -50 or under
mapData1$increase <- ifelse(mapData1$increase > 50, 50, mapData1$increase) #Fit max value to -50 or over
map1 <- ggplot(mapData1, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black") #Create map
map2 <- map1 + scale_fill_gradient(name = "Increase", low = "red", high =  "green", na.value = "grey50")+
geom_polygon(aes(fill = increase), color = "black")
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank())
print(map2 + ggtitle("Increase in GDP per capita from 2017 to 2021 \nFrom -50 or under to 50 or over"))
##### -- Packages -- #####
#install.packages("ggplot2")
#install.packages("map")
#install.packages("tidyverse")
##### -- Libaries -- #####
if(!require(ggplot2)){install.packages('ggplot2')}
if(!require(tidyverse)){install.packages('tidyverse')}
##### -- Load data -- #####
#GDP per capita (current US$) - https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
df_original <- read.csv('C:/C/gitHub/code/R/visual/data/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_5447781.csv',
header = TRUE, sep = ',', na.strings = c("NA"))
df_original
##### -- Clean data -- #####
colnames(df_original)
reqd <- c("Country.Name", "X2017", "X2021")
reqd
df_clean <- subset(df_original, select = reqd) #
df_clean <- na.omit(df_clean) #Remove rows with NA
df_clean
##### -- Calculate increase -- #####
vec2017 <- df_clean$"X2017" #Turn col into vectors
vec2021 <- df_clean$"X2021"
vec_increase <- (vec2021 - vec2017) / vec2021 * 100 #Calculate increase in pct
df_increase <- subset(df_clean, select = ("Country.Name"))
df_increase$increase <- vec_increase #Add vector to dataframe
# - View(df_increase)
##### -- Map -- #####
mapData <- map_data("world") #ggplot2
#Fit names manually
countyNames1 <- (unique(mapData["region"]))
countyNames2 <- (unique(df_increase["Country.Name"]))
write.csv(countyNames1, "C:/C/gitHub/code/R/visual/mapDataRegion.csv", row.names=FALSE)
write.csv(countyNames2, "C:/C/gitHub/code/R/visual/df_increaseCountryName.csv", row.names=FALSE)
df_increase[df_increase$"Country.Name" == "United Kingdom", "Country.Name"] <- "UK"
df_increase[df_increase$"Country.Name" == "United States", "Country.Name"] <- "USA"
df_increase[df_increase$"Country.Name" == "Bahamas, The", "Country.Name"] <- "Bahamas"
df_increase[df_increase$"Country.Name" == "Brunei Darussalam", "Country.Name"] <- "Brunei"
df_increase[df_increase$"Country.Name" == "Cote d'Ivoire", "Country.Name"] <- "Ivory Coast"
df_increase[df_increase$"Country.Name" == "Russian Federation", "Country.Name"] <- "Russia"
df_increase[df_increase$"Country.Name" == "Solomon Islands", "Country.Name"] <- "South Sandwich Islands"
df_increase[df_increase$"Country.Name" == "Slovak Republic", "Country.Name"] <- "Slovakia"
df_increase[df_increase$"Country.Name" == "Turkiye", "Country.Name"] <- "Turkey"
df_increase <- df_increase[df_increase$"Country.Name" %in% mapData$"region", ] #Remove rows where country.name != region
df_increase
colnames(df_increase)[colnames(df_increase) == "Country.Name"] ="region" #Rename to make left_join work
mapData <- left_join(mapData, df_increase, by="region")
sum(is.na(mapData$increase)) # Count NA values : 29806
mapData1 <- mapData %>% filter(!is.na(mapData$increase)) #Filter out NA values
sum(is.na(mapData1$increase)) # Count NA values : 0
mapData1$increase <- ifelse(mapData1$increase < -50, -50, mapData1$increase) #Fit min value to -50 or under
mapData1$increase <- ifelse(mapData1$increase > 50, 50, mapData1$increase) #Fit max value to -50 or over
#chatGPT start
mapData_merged <- full_join(mapData, mapData1, by = c("long", "lat", "group", "order", "region", "subregion"))
map1 <- ggplot(mapData_merged, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black", na.rm = TRUE) # Create map
geom_polygon(data = subset(mapData_merged, is.na(increase)), aes(fill = "grey"), color = "black") +
##### -- Packages -- #####
#install.packages("ggplot2")
#install.packages("map")
#install.packages("tidyverse")
##### -- Libaries -- #####
if(!require(ggplot2)){install.packages('ggplot2')}
if(!require(tidyverse)){install.packages('tidyverse')}
##### -- Load data -- #####
#GDP per capita (current US$) - https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
df_original <- read.csv('C:/C/gitHub/code/R/visual/data/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_5447781.csv',
header = TRUE, sep = ',', na.strings = c("NA"))
df_original
##### -- Clean data -- #####
colnames(df_original)
reqd <- c("Country.Name", "X2017", "X2021")
reqd
df_clean <- subset(df_original, select = reqd) #
df_clean <- na.omit(df_clean) #Remove rows with NA
df_clean
##### -- Calculate increase -- #####
vec2017 <- df_clean$"X2017" #Turn col into vectors
vec2021 <- df_clean$"X2021"
vec_increase <- (vec2021 - vec2017) / vec2021 * 100 #Calculate increase in pct
df_increase <- subset(df_clean, select = ("Country.Name"))
df_increase$increase <- vec_increase #Add vector to dataframe
# - View(df_increase)
##### -- Map -- #####
mapData <- map_data("world") #ggplot2
#Fit names manually
countyNames1 <- (unique(mapData["region"]))
countyNames2 <- (unique(df_increase["Country.Name"]))
write.csv(countyNames1, "C:/C/gitHub/code/R/visual/mapDataRegion.csv", row.names=FALSE)
write.csv(countyNames2, "C:/C/gitHub/code/R/visual/df_increaseCountryName.csv", row.names=FALSE)
df_increase[df_increase$"Country.Name" == "United Kingdom", "Country.Name"] <- "UK"
df_increase[df_increase$"Country.Name" == "United States", "Country.Name"] <- "USA"
df_increase[df_increase$"Country.Name" == "Bahamas, The", "Country.Name"] <- "Bahamas"
df_increase[df_increase$"Country.Name" == "Brunei Darussalam", "Country.Name"] <- "Brunei"
df_increase[df_increase$"Country.Name" == "Cote d'Ivoire", "Country.Name"] <- "Ivory Coast"
df_increase[df_increase$"Country.Name" == "Russian Federation", "Country.Name"] <- "Russia"
df_increase[df_increase$"Country.Name" == "Solomon Islands", "Country.Name"] <- "South Sandwich Islands"
df_increase[df_increase$"Country.Name" == "Slovak Republic", "Country.Name"] <- "Slovakia"
df_increase[df_increase$"Country.Name" == "Turkiye", "Country.Name"] <- "Turkey"
df_increase <- df_increase[df_increase$"Country.Name" %in% mapData$"region", ] #Remove rows where country.name != region
df_increase
colnames(df_increase)[colnames(df_increase) == "Country.Name"] ="region" #Rename to make left_join work
mapData <- left_join(mapData, df_increase, by="region")
sum(is.na(mapData$increase)) # Count NA values : 29806
mapData1 <- mapData %>% filter(!is.na(mapData$increase)) #Filter out NA values
sum(is.na(mapData1$increase)) # Count NA values : 0
mapData1$increase <- ifelse(mapData1$increase < -50, -50, mapData1$increase) #Fit min value to -50 or under
mapData1$increase <- ifelse(mapData1$increase > 50, 50, mapData1$increase) #Fit max value to -50 or over
#chatGPT start
mapData_merged <- full_join(mapData, mapData1, by = c("long", "lat", "group", "order", "region", "subregion"))
map1 <- ggplot(mapData_merged, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black", na.rm = TRUE) # Create map
geom_polygon(data = subset(mapData_merged, is.na(increase)), aes(fill = "grey"), color = "black") +
#ChatGPT end
map1 <- ggplot(mapData1, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black") #Create map
geom_polygon(data = subset(mapData_merged, is.na("increase")), aes(fill = "grey"), color = "black") +
#ChatGPT end
map1 <- ggplot(mapData1, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black") #Create map
geom_polygon(data = subset(mapData_merged, is.na(increase)), aes(fill = "grey"), color = "black") +
#ChatGPT end
map1 <- ggplot(mapData1, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = increase), color = "black") #Create map
atAlgDat
A = matrix(c(1.1, (-1), 2, 3.5, (-1), 5), nrow = 3, ncol = 2, byrow = TRUE)
B = matrix(c(3, 4, (-8), 6, 7, 10), nrow = 2, ncol = 3, byrow = TRUE)
A * B #Not possible?
x_1 <- -25
x_2 <- 0
y_1 <- 0
y_2 <- -3
sqrt((x_2 -x_1)^2 + (y_2 - y_1)^2)
fractions(sqrt((x_2 -x_1)^2 + (y_2 - y_1)^2))
library(MASS)
x_1 <- -25
x_2 <- 0
y_1 <- 0
y_2 <- -3
fractions(sqrt((x_2 -x_1)^2 + (y_2 - y_1)^2))
ricestraw
install.package("ricestraw")
install.packages("ricestraw")
install.packages("ricestraw")
library("ricestraw")
install.packages("itertools")
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("rmarkdown")
install.packages("isdals")
library("isdals")
library("isdals")
knitr::opts_chunk$set(echo = TRUE)
library("isdals")
install.packages("isdals")
library("isdals")
install.packages("isdals")
library("isdals")
ricestraw
install.packages("isdals")
library("isdals")
data(ricestraw)
install.packages("isdals")
data(ricestraw)
data(ricestraw)
ricestraw
library("isdals")
library("ggplot2")
ggplot(data = ricestraw) + geom_point(aes(x = time, y = weight)) + labs(x = "Time", y = "Weight") +
theme(legend.position = "top")
lm(weight ~ time, data = ricestraw )
data(trees)
trees
trees
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume )
data(trees)
data(trees)
# trees
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume )
data(ricestraw)
ricestraw
ggplot(data = ricestraw) + geom_point(aes(x = time, y = weight)) + labs(x = "Time", y = "Weight") +
theme(legend.position = "top")
data(trees)
# trees
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume )
data(trees)
trees
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume )
data(trees)
trees
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume ))
head(trees
head(trees)
data(trees)
head(trees, n = 3)
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume ))
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume ))
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume ))
data(trees)
ggplot(data = trees) + geom_point(aes(x = Height, y = Volume))
ggplot(data = trees) + geom_point(aes(x = Height, y = Girth ))
ggplot(data = trees) + geom_point(aes(x = Volume, y = Girth ))
ggplot(data = trees) + geom_point(aes(x = Girth, y = Volume ))
lm(volumne ~ Girth , data = trees)
lm(Volumne ~ Girth , data = trees)
lm(Volume ~ Girth , data = trees)
+ geom_point(aes(x = Girth , y = Volume ))
??geom_abline
?geom_abline
plot_1 <- ggplot(data = trees)
+ geom_point(aes(x = Girth , y = Volume ))
plot_1 <- ggplot(data = trees)
+ geom_point(aes(x = Girth , y = Volume ))
plot_1 <- ggplot(data = trees)
+ geom_point(aes(x = Girth , y = Volume ))
plot_1 <- ggplot(data = trees)
+ geom_point(aes(x = Girth , y = Volume ))
plot_1 <- ggplot(data = trees)
+ geom_point(aes(x = Girth , y = Volume ))
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) + geom_abline(slope = 5, intercept = -30) # To make the linear line
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) + geom_abline(slope = 5, intercept = -30) # To make the linear line
plot_1
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
(slope = linreg[1], intercept = linreg[2]) # To make the linear line
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
(slope = as.numeric(linreg[1]), intercept = as.numeric(linreg[2])) # To make the linear line
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = as.numeric(linreg[1]), intercept = as.numeric(linreg[2]) ) # To make the linear line
linreg <- lm(Volume ~ Girth , data = trees)
linreg
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = as.numeric(linreg[1]), intercept = as.numeric(linreg[2]) ) # To make the linear line
linreg <- lm(Volume ~ Girth , data = trees)
linreg[1]
linreg <- lm(Volume ~ Girth , data = trees)
as.numeric(linreg[1])
linreg[1][1]
linreg <- lm(Volume ~ Girth , data = trees)
linreg[1]
coef(linreg)
coef(linreg)[1]
coef(linreg)[2]
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = coef(linreg)[1], intercept = coef(linreg)[2]) ) # To make the linear line
linreg <- lm(Volume ~ Girth , data = trees)
coef(linreg)[1]
coef(linreg)[2]
linreg <- lm(Volume ~ Girth , data = trees)
as.numeric(coef(linreg)[1])
coef(linreg)[2]
linreg <- lm(Volume ~ Girth , data = trees)
as.numeric(coef(linreg)[1])
as.numeric(coef(linreg)[2])
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = alpha, intercept = beta) ) # To make the linear line
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = beta, intercept = alpha) ) # To make the linear line
linreg <- lm(Volume ~ Girth , data = trees)
alpha <- as.numeric(coef(linreg)[1])
beta <- as.numeric(coef(linreg)[2])
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = beta, intercept = alpha) ) # To make the linear line
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = 2, intercept = 2) ) # To make the linear line
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = 2, intercept = 2) ) # To make the linear line
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = 2, intercept = 2)  # To make the linear line
plot_1
plot_1 <- ggplot(data = trees) + geom_point(aes(x = Girth , y = Volume )) +
geom_abline(slope = beta, intercept = alpha)  # To make the linear line
plot_1
cor(trees$Volume, trees$Girth)
cor(trees$Volume, trees$Girth)
cor(trees$Girth, trees$Volume)
?abline
library(isdals)
data(tartar)
library(isdals)
data(tartar)
head(tartar, n=3)
?geom_boxplot
ggplot(data = tartar) +
?geom_boxplot
View(ricestraw)
?geom_boxplot
ggplot(data = tartar) + geom_boxplot(treat, index)
?geom_boxplot
ggplot(data = tartar) + geom_boxplot()
?geom_boxplot
ggplot(data = tartar, aes(treat, index)) + geom_boxplot()
?geom_boxplot
ggplot(data = tartar, aes(treat, index)) + geom_boxplot(outliers = TRUE)
?geom_boxplot
ggplot(data = tartar, aes(treat, index)) + geom_boxplot(outliers = TRUE, colors = 'red')
?geom_boxplot
ggplot(data = tartar, aes(treat, index)) + geom_boxplot(outliers = TRUE, color = 'red')
?geom_boxplot
ggplot(data = tartar, aes(treat, index)) + geom_boxplot(outliers = TRUE, color = 'blue')
lm(index ˜ treat -1, data=tartar)
lm(index ~ treat -1, data=tartar)
lm(index ~ treat, data=tartar)
lm(index ~ treat -1, data=tartar)
lm(index ~ treat, data=tartar)
?geom_boxplot
ggplot(data = tartar, aes(treat, index)) + geom_boxplot(outliers = TRUE, color = 'blue')
